//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientManagement.UI.MVC.cmLogicService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="cmLogicService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUsers", ReplyAction="http://tempuri.org/IService/insertAspNetUsersResponse")]
        bool insertAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUsers", ReplyAction="http://tempuri.org/IService/insertAspNetUsersResponse")]
        System.Threading.Tasks.Task<bool> insertAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsers", ReplyAction="http://tempuri.org/IService/getAspNetUsersResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsers", ReplyAction="http://tempuri.org/IService/getAspNetUsersResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsersByName", ReplyAction="http://tempuri.org/IService/getAspNetUsersByNameResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsersByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsersByName", ReplyAction="http://tempuri.org/IService/getAspNetUsersByNameResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUserById", ReplyAction="http://tempuri.org/IService/getUserByIdResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getUserById(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUserById", ReplyAction="http://tempuri.org/IService/getUserByIdResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getUserByIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUsers", ReplyAction="http://tempuri.org/IService/deleteAspNetUsersResponse")]
        bool deleteAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUsers", ReplyAction="http://tempuri.org/IService/deleteAspNetUsersResponse")]
        System.Threading.Tasks.Task<bool> deleteAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUsers", ReplyAction="http://tempuri.org/IService/updateAspNetUsersResponse")]
        bool updateAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUsers", ReplyAction="http://tempuri.org/IService/updateAspNetUsersResponse")]
        System.Threading.Tasks.Task<bool> updateAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByUserId", ReplyAction="http://tempuri.org/IService/getClientsByUserIdResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByUserId", ReplyAction="http://tempuri.org/IService/getClientsByUserIdResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsforUser", ReplyAction="http://tempuri.org/IService/getClientsforUserResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsforUser(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsforUser", ReplyAction="http://tempuri.org/IService/getClientsforUserResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsforUserAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClients", ReplyAction="http://tempuri.org/IService/getClientsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClients", ReplyAction="http://tempuri.org/IService/getClientsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByName", ReplyAction="http://tempuri.org/IService/getClientsByNameResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByName", ReplyAction="http://tempuri.org/IService/getClientsByNameResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByPhoneNumber", ReplyAction="http://tempuri.org/IService/getClientsByPhoneNumberResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByPhoneNumber(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByPhoneNumber", ReplyAction="http://tempuri.org/IService/getClientsByPhoneNumberResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByPhoneNumberAsync(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByEmail", ReplyAction="http://tempuri.org/IService/getClientsByEmailResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByEmail", ReplyAction="http://tempuri.org/IService/getClientsByEmailResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByAddressId", ReplyAction="http://tempuri.org/IService/getClientsByAddressIdResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByAddressId(int AddressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByAddressId", ReplyAction="http://tempuri.org/IService/getClientsByAddressIdResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByAddressIdAsync(int AddressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertClients", ReplyAction="http://tempuri.org/IService/insertClientsResponse")]
        bool insertClients(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertClients", ReplyAction="http://tempuri.org/IService/insertClientsResponse")]
        System.Threading.Tasks.Task<bool> insertClientsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteClient", ReplyAction="http://tempuri.org/IService/deleteClientResponse")]
        bool deleteClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteClient", ReplyAction="http://tempuri.org/IService/deleteClientResponse")]
        System.Threading.Tasks.Task<bool> deleteClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateClient", ReplyAction="http://tempuri.org/IService/updateClientResponse")]
        bool updateClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateClient", ReplyAction="http://tempuri.org/IService/updateClientResponse")]
        System.Threading.Tasks.Task<bool> updateClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getServiceTypeByName", ReplyAction="http://tempuri.org/IService/getServiceTypeByNameResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[] getServiceTypeByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getServiceTypeByName", ReplyAction="http://tempuri.org/IService/getServiceTypeByNameResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[]> getServiceTypeByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getServiceTypes", ReplyAction="http://tempuri.org/IService/getServiceTypesResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[] getServiceTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getServiceTypes", ReplyAction="http://tempuri.org/IService/getServiceTypesResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[]> getServiceTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertServiceType", ReplyAction="http://tempuri.org/IService/insertServiceTypeResponse")]
        bool insertServiceType(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertServiceType", ReplyAction="http://tempuri.org/IService/insertServiceTypeResponse")]
        System.Threading.Tasks.Task<bool> insertServiceTypeAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteServiceType", ReplyAction="http://tempuri.org/IService/deleteServiceTypeResponse")]
        bool deleteServiceType(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteServiceType", ReplyAction="http://tempuri.org/IService/deleteServiceTypeResponse")]
        System.Threading.Tasks.Task<bool> deleteServiceTypeAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateServiceType", ReplyAction="http://tempuri.org/IService/updateServiceTypeResponse")]
        bool updateServiceType(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateServiceType", ReplyAction="http://tempuri.org/IService/updateServiceTypeResponse")]
        System.Threading.Tasks.Task<bool> updateServiceTypeAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOs", ReplyAction="http://tempuri.org/IService/getAddressDTOsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOs", ReplyAction="http://tempuri.org/IService/getAddressDTOsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateandZip", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateandZipResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCityandStateandZip(string street, string city, string state, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateandZip", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateandZipResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityandStateandZipAsync(string street, string city, string state, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreet", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreet(string street);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreet", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetAsync(string street);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCity", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCity(string street, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCity", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityAsync(string street, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCityandState", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCityandState(string street, string city, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCityandState", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityandStateAsync(string street, string city, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByZip", ReplyAction="http://tempuri.org/IService/getAddressDTOsByZipResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByZip(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByZip", ReplyAction="http://tempuri.org/IService/getAddressDTOsByZipResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByZipAsync(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByState", ReplyAction="http://tempuri.org/IService/getAddressDTOsByStateResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByState(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByState", ReplyAction="http://tempuri.org/IService/getAddressDTOsByStateResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByStateAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByCity", ReplyAction="http://tempuri.org/IService/getAddressDTOsByCityResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByCity", ReplyAction="http://tempuri.org/IService/getAddressDTOsByCityResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAddressDTOs", ReplyAction="http://tempuri.org/IService/insertAddressDTOsResponse")]
        bool insertAddressDTOs(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAddressDTOs", ReplyAction="http://tempuri.org/IService/insertAddressDTOsResponse")]
        System.Threading.Tasks.Task<bool> insertAddressDTOsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAddress", ReplyAction="http://tempuri.org/IService/deleteAddressResponse")]
        bool deleteAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAddress", ReplyAction="http://tempuri.org/IService/deleteAddressResponse")]
        System.Threading.Tasks.Task<bool> deleteAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAddress", ReplyAction="http://tempuri.org/IService/updateAddressResponse")]
        bool updateAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAddress", ReplyAction="http://tempuri.org/IService/updateAddressResponse")]
        System.Threading.Tasks.Task<bool> updateAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobExpenses", ReplyAction="http://tempuri.org/IService/getJobExpensesResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO[] getJobExpenses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobExpenses", ReplyAction="http://tempuri.org/IService/getJobExpensesResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO[]> getJobExpensesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertJobExpense", ReplyAction="http://tempuri.org/IService/insertJobExpenseResponse")]
        bool insertJobExpense(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job, ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertJobExpense", ReplyAction="http://tempuri.org/IService/insertJobExpenseResponse")]
        System.Threading.Tasks.Task<bool> insertJobExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job, ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateJobExpense", ReplyAction="http://tempuri.org/IService/updateJobExpenseResponse")]
        bool updateJobExpense(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateJobExpense", ReplyAction="http://tempuri.org/IService/updateJobExpenseResponse")]
        System.Threading.Tasks.Task<bool> updateJobExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteJobExpense", ReplyAction="http://tempuri.org/IService/deleteJobExpenseResponse")]
        bool deleteJobExpense(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteJobExpense", ReplyAction="http://tempuri.org/IService/deleteJobExpenseResponse")]
        System.Threading.Tasks.Task<bool> deleteJobExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/completeJob", ReplyAction="http://tempuri.org/IService/completeJobResponse")]
        bool completeJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/completeJob", ReplyAction="http://tempuri.org/IService/completeJobResponse")]
        System.Threading.Tasks.Task<bool> completeJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobsForUser", ReplyAction="http://tempuri.org/IService/getJobsForUserResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getJobsForUser(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobsForUser", ReplyAction="http://tempuri.org/IService/getJobsForUserResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getJobsForUserAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobsByUserComplete", ReplyAction="http://tempuri.org/IService/getJobsByUserCompleteResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getJobsByUserComplete(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobsByUserComplete", ReplyAction="http://tempuri.org/IService/getJobsByUserCompleteResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getJobsByUserCompleteAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobsByUserIncomplete", ReplyAction="http://tempuri.org/IService/getJobsByUserIncompleteResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getJobsByUserIncomplete(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getJobsByUserIncomplete", ReplyAction="http://tempuri.org/IService/getJobsByUserIncompleteResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getJobsByUserIncompleteAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getjobs", ReplyAction="http://tempuri.org/IService/getjobsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getjobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getjobs", ReplyAction="http://tempuri.org/IService/getjobsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getjobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertJob", ReplyAction="http://tempuri.org/IService/insertJobResponse")]
        bool insertJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertJob", ReplyAction="http://tempuri.org/IService/insertJobResponse")]
        System.Threading.Tasks.Task<bool> insertJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteJob", ReplyAction="http://tempuri.org/IService/deleteJobResponse")]
        bool deleteJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteJob", ReplyAction="http://tempuri.org/IService/deleteJobResponse")]
        System.Threading.Tasks.Task<bool> deleteJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateJob", ReplyAction="http://tempuri.org/IService/updateJobResponse")]
        bool updateJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateJob", ReplyAction="http://tempuri.org/IService/updateJobResponse")]
        System.Threading.Tasks.Task<bool> updateJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getExpenses", ReplyAction="http://tempuri.org/IService/getExpensesResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO[] getExpenses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getExpenses", ReplyAction="http://tempuri.org/IService/getExpensesResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO[]> getExpensesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertExpense", ReplyAction="http://tempuri.org/IService/insertExpenseResponse")]
        bool insertExpense(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertExpense", ReplyAction="http://tempuri.org/IService/insertExpenseResponse")]
        System.Threading.Tasks.Task<bool> insertExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateExpense", ReplyAction="http://tempuri.org/IService/updateExpenseResponse")]
        bool updateExpense(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateExpense", ReplyAction="http://tempuri.org/IService/updateExpenseResponse")]
        System.Threading.Tasks.Task<bool> updateExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteExpense", ReplyAction="http://tempuri.org/IService/deleteExpenseResponse")]
        bool deleteExpense(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteExpense", ReplyAction="http://tempuri.org/IService/deleteExpenseResponse")]
        System.Threading.Tasks.Task<bool> deleteExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/generateInvoice", ReplyAction="http://tempuri.org/IService/generateInvoiceResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.Invoice generateInvoice(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/generateInvoice", ReplyAction="http://tempuri.org/IService/generateInvoiceResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.Invoice> generateInvoiceAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ClientManagement.UI.MVC.cmLogicService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ClientManagement.UI.MVC.cmLogicService.IService>, ClientManagement.UI.MVC.cmLogicService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool insertAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.insertAspNetUsers(user);
        }
        
        public System.Threading.Tasks.Task<bool> insertAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.insertAspNetUsersAsync(user);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsers() {
            return base.Channel.getAspNetUsers();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersAsync() {
            return base.Channel.getAspNetUsersAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsersByName(string name) {
            return base.Channel.getAspNetUsersByName(name);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersByNameAsync(string name) {
            return base.Channel.getAspNetUsersByNameAsync(name);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getUserById(string userId) {
            return base.Channel.getUserById(userId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getUserByIdAsync(string userId) {
            return base.Channel.getUserByIdAsync(userId);
        }
        
        public bool deleteAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.deleteAspNetUsers(user);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.deleteAspNetUsersAsync(user);
        }
        
        public bool updateAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.updateAspNetUsers(user);
        }
        
        public System.Threading.Tasks.Task<bool> updateAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.updateAspNetUsersAsync(user);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByUserId(string userId) {
            return base.Channel.getClientsByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByUserIdAsync(string userId) {
            return base.Channel.getClientsByUserIdAsync(userId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsforUser(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.getClientsforUser(user);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsforUserAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.getClientsforUserAsync(user);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClients() {
            return base.Channel.getClients();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsAsync() {
            return base.Channel.getClientsAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByName(string name) {
            return base.Channel.getClientsByName(name);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByNameAsync(string name) {
            return base.Channel.getClientsByNameAsync(name);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByPhoneNumber(string phoneNumber) {
            return base.Channel.getClientsByPhoneNumber(phoneNumber);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByPhoneNumberAsync(string phoneNumber) {
            return base.Channel.getClientsByPhoneNumberAsync(phoneNumber);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByEmail(string email) {
            return base.Channel.getClientsByEmail(email);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByEmailAsync(string email) {
            return base.Channel.getClientsByEmailAsync(email);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByAddressId(int AddressId) {
            return base.Channel.getClientsByAddressId(AddressId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByAddressIdAsync(int AddressId) {
            return base.Channel.getClientsByAddressIdAsync(AddressId);
        }
        
        public bool insertClients(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.insertClients(client);
        }
        
        public System.Threading.Tasks.Task<bool> insertClientsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.insertClientsAsync(client);
        }
        
        public bool deleteClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.deleteClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> deleteClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.deleteClientAsync(client);
        }
        
        public bool updateClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.updateClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> updateClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.updateClientAsync(client);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[] getServiceTypeByName(string name) {
            return base.Channel.getServiceTypeByName(name);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[]> getServiceTypeByNameAsync(string name) {
            return base.Channel.getServiceTypeByNameAsync(name);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[] getServiceTypes() {
            return base.Channel.getServiceTypes();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO[]> getServiceTypesAsync() {
            return base.Channel.getServiceTypesAsync();
        }
        
        public bool insertServiceType(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type) {
            return base.Channel.insertServiceType(type);
        }
        
        public System.Threading.Tasks.Task<bool> insertServiceTypeAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type) {
            return base.Channel.insertServiceTypeAsync(type);
        }
        
        public bool deleteServiceType(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type) {
            return base.Channel.deleteServiceType(type);
        }
        
        public System.Threading.Tasks.Task<bool> deleteServiceTypeAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type) {
            return base.Channel.deleteServiceTypeAsync(type);
        }
        
        public bool updateServiceType(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type) {
            return base.Channel.updateServiceType(type);
        }
        
        public System.Threading.Tasks.Task<bool> updateServiceTypeAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ServiceTypeDTO type) {
            return base.Channel.updateServiceTypeAsync(type);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOs() {
            return base.Channel.getAddressDTOs();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsAsync() {
            return base.Channel.getAddressDTOsAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCityandStateandZip(string street, string city, string state, string zip) {
            return base.Channel.getAddressDTOByStreetandCityandStateandZip(street, city, state, zip);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityandStateandZipAsync(string street, string city, string state, string zip) {
            return base.Channel.getAddressDTOByStreetandCityandStateandZipAsync(street, city, state, zip);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreet(string street) {
            return base.Channel.getAddressDTOByStreet(street);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetAsync(string street) {
            return base.Channel.getAddressDTOByStreetAsync(street);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCity(string street, string city) {
            return base.Channel.getAddressDTOByStreetandCity(street, city);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityAsync(string street, string city) {
            return base.Channel.getAddressDTOByStreetandCityAsync(street, city);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCityandState(string street, string city, string state) {
            return base.Channel.getAddressDTOByStreetandCityandState(street, city, state);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityandStateAsync(string street, string city, string state) {
            return base.Channel.getAddressDTOByStreetandCityandStateAsync(street, city, state);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByZip(string zip) {
            return base.Channel.getAddressDTOsByZip(zip);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByZipAsync(string zip) {
            return base.Channel.getAddressDTOsByZipAsync(zip);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByState(string state) {
            return base.Channel.getAddressDTOsByState(state);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByStateAsync(string state) {
            return base.Channel.getAddressDTOsByStateAsync(state);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByCity(string city) {
            return base.Channel.getAddressDTOsByCity(city);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByCityAsync(string city) {
            return base.Channel.getAddressDTOsByCityAsync(city);
        }
        
        public bool insertAddressDTOs(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.insertAddressDTOs(address);
        }
        
        public System.Threading.Tasks.Task<bool> insertAddressDTOsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.insertAddressDTOsAsync(address);
        }
        
        public bool deleteAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.deleteAddress(address);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.deleteAddressAsync(address);
        }
        
        public bool updateAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.updateAddress(address);
        }
        
        public System.Threading.Tasks.Task<bool> updateAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.updateAddressAsync(address);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO[] getJobExpenses() {
            return base.Channel.getJobExpenses();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO[]> getJobExpensesAsync() {
            return base.Channel.getJobExpensesAsync();
        }
        
        public bool insertJobExpense(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job, ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.insertJobExpense(job, expense);
        }
        
        public System.Threading.Tasks.Task<bool> insertJobExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job, ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.insertJobExpenseAsync(job, expense);
        }
        
        public bool updateJobExpense(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je) {
            return base.Channel.updateJobExpense(je);
        }
        
        public System.Threading.Tasks.Task<bool> updateJobExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je) {
            return base.Channel.updateJobExpenseAsync(je);
        }
        
        public bool deleteJobExpense(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je) {
            return base.Channel.deleteJobExpense(je);
        }
        
        public System.Threading.Tasks.Task<bool> deleteJobExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.JobExpenseDTO je) {
            return base.Channel.deleteJobExpenseAsync(je);
        }
        
        public bool completeJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.completeJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> completeJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.completeJobAsync(job);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getJobsForUser(string userId) {
            return base.Channel.getJobsForUser(userId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getJobsForUserAsync(string userId) {
            return base.Channel.getJobsForUserAsync(userId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getJobsByUserComplete(string userId) {
            return base.Channel.getJobsByUserComplete(userId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getJobsByUserCompleteAsync(string userId) {
            return base.Channel.getJobsByUserCompleteAsync(userId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getJobsByUserIncomplete(string userId) {
            return base.Channel.getJobsByUserIncomplete(userId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getJobsByUserIncompleteAsync(string userId) {
            return base.Channel.getJobsByUserIncompleteAsync(userId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[] getjobs() {
            return base.Channel.getjobs();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO[]> getjobsAsync() {
            return base.Channel.getjobsAsync();
        }
        
        public bool insertJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.insertJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> insertJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.insertJobAsync(job);
        }
        
        public bool deleteJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.deleteJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> deleteJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.deleteJobAsync(job);
        }
        
        public bool updateJob(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.updateJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> updateJobAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.updateJobAsync(job);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO[] getExpenses() {
            return base.Channel.getExpenses();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO[]> getExpensesAsync() {
            return base.Channel.getExpensesAsync();
        }
        
        public bool insertExpense(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.insertExpense(expense);
        }
        
        public System.Threading.Tasks.Task<bool> insertExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.insertExpenseAsync(expense);
        }
        
        public bool updateExpense(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.updateExpense(expense);
        }
        
        public System.Threading.Tasks.Task<bool> updateExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.updateExpenseAsync(expense);
        }
        
        public bool deleteExpense(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.deleteExpense(expense);
        }
        
        public System.Threading.Tasks.Task<bool> deleteExpenseAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ExpenseDTO expense) {
            return base.Channel.deleteExpenseAsync(expense);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.Invoice generateInvoice(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.generateInvoice(job);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.Invoice> generateInvoiceAsync(ClientManagement.UI.ServiceAccess.cmLogicService.jobDTO job) {
            return base.Channel.generateInvoiceAsync(job);
        }
    }
}
