//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientManagement.UI.ServiceAccess.cmLogicService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUsers", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class AspNetUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessFailedCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EmailConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockoutEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LockoutEndDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PhoneNumberConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TwoFactorEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessFailedCount {
            get {
                return this.AccessFailedCountField;
            }
            set {
                if ((this.AccessFailedCountField.Equals(value) != true)) {
                    this.AccessFailedCountField = value;
                    this.RaisePropertyChanged("AccessFailedCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EmailConfirmed {
            get {
                return this.EmailConfirmedField;
            }
            set {
                if ((this.EmailConfirmedField.Equals(value) != true)) {
                    this.EmailConfirmedField = value;
                    this.RaisePropertyChanged("EmailConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockoutEnabled {
            get {
                return this.LockoutEnabledField;
            }
            set {
                if ((this.LockoutEnabledField.Equals(value) != true)) {
                    this.LockoutEnabledField = value;
                    this.RaisePropertyChanged("LockoutEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LockoutEndDateUtc {
            get {
                return this.LockoutEndDateUtcField;
            }
            set {
                if ((this.LockoutEndDateUtcField.Equals(value) != true)) {
                    this.LockoutEndDateUtcField = value;
                    this.RaisePropertyChanged("LockoutEndDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PhoneNumberConfirmed {
            get {
                return this.PhoneNumberConfirmedField;
            }
            set {
                if ((this.PhoneNumberConfirmedField.Equals(value) != true)) {
                    this.PhoneNumberConfirmedField = value;
                    this.RaisePropertyChanged("PhoneNumberConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityStamp {
            get {
                return this.SecurityStampField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityStampField, value) != true)) {
                    this.SecurityStampField = value;
                    this.RaisePropertyChanged("SecurityStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetAddress {
            get {
                return this.StreetAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetAddressField, value) != true)) {
                    this.StreetAddressField = value;
                    this.RaisePropertyChanged("StreetAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TwoFactorEnabled {
            get {
                return this.TwoFactorEnabledField;
            }
            set {
                if ((this.TwoFactorEnabledField.Equals(value) != true)) {
                    this.TwoFactorEnabledField = value;
                    this.RaisePropertyChanged("TwoFactorEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientDTO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class ClientDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AddressIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AddressID {
            get {
                return this.AddressIDField;
            }
            set {
                if ((this.AddressIDField.Equals(value) != true)) {
                    this.AddressIDField = value;
                    this.RaisePropertyChanged("AddressID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDTO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class AddressDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetRoles", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class AspNetRoles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserClaims", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class AspNetUserClaims : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimType {
            get {
                return this.ClaimTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimTypeField, value) != true)) {
                    this.ClaimTypeField = value;
                    this.RaisePropertyChanged("ClaimType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimValue {
            get {
                return this.ClaimValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimValueField, value) != true)) {
                    this.ClaimValueField = value;
                    this.RaisePropertyChanged("ClaimValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserLogins", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class AspNetUserLogins : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginProviderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginProvider {
            get {
                return this.LoginProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginProviderField, value) != true)) {
                    this.LoginProviderField = value;
                    this.RaisePropertyChanged("LoginProvider");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderKey {
            get {
                return this.ProviderKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderKeyField, value) != true)) {
                    this.ProviderKeyField = value;
                    this.RaisePropertyChanged("ProviderKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserRoles", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.Backend.Logic.Models")]
    [System.SerializableAttribute()]
    public partial class AspNetUserRoles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleIdField, value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="cmLogicService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsers", ReplyAction="http://tempuri.org/IService/getAspNetUsersResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsers", ReplyAction="http://tempuri.org/IService/getAspNetUsersResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsersByName", ReplyAction="http://tempuri.org/IService/getAspNetUsersByNameResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsersByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUsersByName", ReplyAction="http://tempuri.org/IService/getAspNetUsersByNameResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClients", ReplyAction="http://tempuri.org/IService/getClientsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClients", ReplyAction="http://tempuri.org/IService/getClientsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByName", ReplyAction="http://tempuri.org/IService/getClientsByNameResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByName", ReplyAction="http://tempuri.org/IService/getClientsByNameResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByPhoneNumber", ReplyAction="http://tempuri.org/IService/getClientsByPhoneNumberResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByPhoneNumber(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByPhoneNumber", ReplyAction="http://tempuri.org/IService/getClientsByPhoneNumberResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByPhoneNumberAsync(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByEmail", ReplyAction="http://tempuri.org/IService/getClientsByEmailResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByEmail", ReplyAction="http://tempuri.org/IService/getClientsByEmailResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByAddressId", ReplyAction="http://tempuri.org/IService/getClientsByAddressIdResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByAddressId(int AddressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getClientsByAddressId", ReplyAction="http://tempuri.org/IService/getClientsByAddressIdResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByAddressIdAsync(int AddressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetRoles", ReplyAction="http://tempuri.org/IService/getAspNetRolesResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[] getAspNetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetRoles", ReplyAction="http://tempuri.org/IService/getAspNetRolesResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[]> getAspNetRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetRolesByName", ReplyAction="http://tempuri.org/IService/getAspNetRolesByNameResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[] getAspNetRolesByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetRolesByName", ReplyAction="http://tempuri.org/IService/getAspNetRolesByNameResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[]> getAspNetRolesByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetRolesById", ReplyAction="http://tempuri.org/IService/getAspNetRolesByIdResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[] getAspNetRolesById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetRolesById", ReplyAction="http://tempuri.org/IService/getAspNetRolesByIdResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[]> getAspNetRolesByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserClaims", ReplyAction="http://tempuri.org/IService/getAspNetUserClaimsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[] getAspNetUserClaims();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserClaims", ReplyAction="http://tempuri.org/IService/getAspNetUserClaimsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[]> getAspNetUserClaimsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserClaimsById", ReplyAction="http://tempuri.org/IService/getAspNetUserClaimsByIdResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[] getAspNetUserClaimsById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserClaimsById", ReplyAction="http://tempuri.org/IService/getAspNetUserClaimsByIdResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[]> getAspNetUserClaimsByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserClaimsByUserIdandClaimtypeandClaimValue", ReplyAction="http://tempuri.org/IService/getAspNetUserClaimsByUserIdandClaimtypeandClaimValueR" +
            "esponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[] getAspNetUserClaimsByUserIdandClaimtypeandClaimValue(string userId, string claimType, string claimValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserClaimsByUserIdandClaimtypeandClaimValue", ReplyAction="http://tempuri.org/IService/getAspNetUserClaimsByUserIdandClaimtypeandClaimValueR" +
            "esponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[]> getAspNetUserClaimsByUserIdandClaimtypeandClaimValueAsync(string userId, string claimType, string claimValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserLogins", ReplyAction="http://tempuri.org/IService/getAspNetUserLoginsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[] getAspNetUserLogins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserLogins", ReplyAction="http://tempuri.org/IService/getAspNetUserLoginsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[]> getAspNetUserLoginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserLogin", ReplyAction="http://tempuri.org/IService/getAspNetUserLoginResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[] getAspNetUserLogin(string loginProvider, string providerKey, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserLogin", ReplyAction="http://tempuri.org/IService/getAspNetUserLoginResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[]> getAspNetUserLoginAsync(string loginProvider, string providerKey, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserRoles", ReplyAction="http://tempuri.org/IService/getAspNetUserRolesResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[] getAspNetUserRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserRoles", ReplyAction="http://tempuri.org/IService/getAspNetUserRolesResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[]> getAspNetUserRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserRole", ReplyAction="http://tempuri.org/IService/getAspNetUserRoleResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[] getAspNetUserRole(string userId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAspNetUserRole", ReplyAction="http://tempuri.org/IService/getAspNetUserRoleResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[]> getAspNetUserRoleAsync(string userId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOs", ReplyAction="http://tempuri.org/IService/getAddressDTOsResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOs", ReplyAction="http://tempuri.org/IService/getAddressDTOsResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTO", ReplyAction="http://tempuri.org/IService/getAddressDTOResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTO(string street, string city, string state, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTO", ReplyAction="http://tempuri.org/IService/getAddressDTOResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOAsync(string street, string city, string state, string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreet", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreet(string street);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreet", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetAsync(string street);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCity", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCity(string street, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCity", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityAsync(string street, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCityandState", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCityandState(string street, string city, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOByStreetandCityandState", ReplyAction="http://tempuri.org/IService/getAddressDTOByStreetandCityandStateResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityandStateAsync(string street, string city, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByZip", ReplyAction="http://tempuri.org/IService/getAddressDTOsByZipResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByZip(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByZip", ReplyAction="http://tempuri.org/IService/getAddressDTOsByZipResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByZipAsync(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByState", ReplyAction="http://tempuri.org/IService/getAddressDTOsByStateResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByState(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByState", ReplyAction="http://tempuri.org/IService/getAddressDTOsByStateResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByStateAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByCity", ReplyAction="http://tempuri.org/IService/getAddressDTOsByCityResponse")]
        ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAddressDTOsByCity", ReplyAction="http://tempuri.org/IService/getAddressDTOsByCityResponse")]
        System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUsers", ReplyAction="http://tempuri.org/IService/insertAspNetUsersResponse")]
        bool insertAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUsers", ReplyAction="http://tempuri.org/IService/insertAspNetUsersResponse")]
        System.Threading.Tasks.Task<bool> insertAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertClients", ReplyAction="http://tempuri.org/IService/insertClientsResponse")]
        bool insertClients(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertClients", ReplyAction="http://tempuri.org/IService/insertClientsResponse")]
        System.Threading.Tasks.Task<bool> insertClientsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetRoles", ReplyAction="http://tempuri.org/IService/insertAspNetRolesResponse")]
        bool insertAspNetRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetRoles", ReplyAction="http://tempuri.org/IService/insertAspNetRolesResponse")]
        System.Threading.Tasks.Task<bool> insertAspNetRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUserClaims", ReplyAction="http://tempuri.org/IService/insertAspNetUserClaimsResponse")]
        bool insertAspNetUserClaims(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUserClaims", ReplyAction="http://tempuri.org/IService/insertAspNetUserClaimsResponse")]
        System.Threading.Tasks.Task<bool> insertAspNetUserClaimsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUserLogins", ReplyAction="http://tempuri.org/IService/insertAspNetUserLoginsResponse")]
        bool insertAspNetUserLogins(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUserLogins", ReplyAction="http://tempuri.org/IService/insertAspNetUserLoginsResponse")]
        System.Threading.Tasks.Task<bool> insertAspNetUserLoginsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUserRoles", ReplyAction="http://tempuri.org/IService/insertAspNetUserRolesResponse")]
        bool insertAspNetUserRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAspNetUserRoles", ReplyAction="http://tempuri.org/IService/insertAspNetUserRolesResponse")]
        System.Threading.Tasks.Task<bool> insertAspNetUserRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAddressDTOs", ReplyAction="http://tempuri.org/IService/insertAddressDTOsResponse")]
        bool insertAddressDTOs(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/insertAddressDTOs", ReplyAction="http://tempuri.org/IService/insertAddressDTOsResponse")]
        System.Threading.Tasks.Task<bool> insertAddressDTOsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAddress", ReplyAction="http://tempuri.org/IService/deleteAddressResponse")]
        bool deleteAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAddress", ReplyAction="http://tempuri.org/IService/deleteAddressResponse")]
        System.Threading.Tasks.Task<bool> deleteAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetRole", ReplyAction="http://tempuri.org/IService/deleteAspNetRoleResponse")]
        bool deleteAspNetRole(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetRole", ReplyAction="http://tempuri.org/IService/deleteAspNetRoleResponse")]
        System.Threading.Tasks.Task<bool> deleteAspNetRoleAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUserClaim", ReplyAction="http://tempuri.org/IService/deleteAspNetUserClaimResponse")]
        bool deleteAspNetUserClaim(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUserClaim", ReplyAction="http://tempuri.org/IService/deleteAspNetUserClaimResponse")]
        System.Threading.Tasks.Task<bool> deleteAspNetUserClaimAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUserLogin", ReplyAction="http://tempuri.org/IService/deleteAspNetUserLoginResponse")]
        bool deleteAspNetUserLogin(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUserLogin", ReplyAction="http://tempuri.org/IService/deleteAspNetUserLoginResponse")]
        System.Threading.Tasks.Task<bool> deleteAspNetUserLoginAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUserRoles", ReplyAction="http://tempuri.org/IService/deleteAspNetUserRolesResponse")]
        bool deleteAspNetUserRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUserRoles", ReplyAction="http://tempuri.org/IService/deleteAspNetUserRolesResponse")]
        System.Threading.Tasks.Task<bool> deleteAspNetUserRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUsers", ReplyAction="http://tempuri.org/IService/deleteAspNetUsersResponse")]
        bool deleteAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteAspNetUsers", ReplyAction="http://tempuri.org/IService/deleteAspNetUsersResponse")]
        System.Threading.Tasks.Task<bool> deleteAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteClient", ReplyAction="http://tempuri.org/IService/deleteClientResponse")]
        bool deleteClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deleteClient", ReplyAction="http://tempuri.org/IService/deleteClientResponse")]
        System.Threading.Tasks.Task<bool> deleteClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAddress", ReplyAction="http://tempuri.org/IService/updateAddressResponse")]
        bool updateAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAddress", ReplyAction="http://tempuri.org/IService/updateAddressResponse")]
        System.Threading.Tasks.Task<bool> updateAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetRole", ReplyAction="http://tempuri.org/IService/updateAspNetRoleResponse")]
        bool updateAspNetRole(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetRole", ReplyAction="http://tempuri.org/IService/updateAspNetRoleResponse")]
        System.Threading.Tasks.Task<bool> updateAspNetRoleAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUserClaim", ReplyAction="http://tempuri.org/IService/updateAspNetUserClaimResponse")]
        bool updateAspNetUserClaim(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUserClaim", ReplyAction="http://tempuri.org/IService/updateAspNetUserClaimResponse")]
        System.Threading.Tasks.Task<bool> updateAspNetUserClaimAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUserLogin", ReplyAction="http://tempuri.org/IService/updateAspNetUserLoginResponse")]
        bool updateAspNetUserLogin(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUserLogin", ReplyAction="http://tempuri.org/IService/updateAspNetUserLoginResponse")]
        System.Threading.Tasks.Task<bool> updateAspNetUserLoginAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUserRoles", ReplyAction="http://tempuri.org/IService/updateAspNetUserRolesResponse")]
        bool updateAspNetUserRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUserRoles", ReplyAction="http://tempuri.org/IService/updateAspNetUserRolesResponse")]
        System.Threading.Tasks.Task<bool> updateAspNetUserRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUsers", ReplyAction="http://tempuri.org/IService/updateAspNetUsersResponse")]
        bool updateAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateAspNetUsers", ReplyAction="http://tempuri.org/IService/updateAspNetUsersResponse")]
        System.Threading.Tasks.Task<bool> updateAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateClient", ReplyAction="http://tempuri.org/IService/updateClientResponse")]
        bool updateClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateClient", ReplyAction="http://tempuri.org/IService/updateClientResponse")]
        System.Threading.Tasks.Task<bool> updateClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ClientManagement.UI.ServiceAccess.cmLogicService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ClientManagement.UI.ServiceAccess.cmLogicService.IService>, ClientManagement.UI.ServiceAccess.cmLogicService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsers() {
            return base.Channel.getAspNetUsers();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersAsync() {
            return base.Channel.getAspNetUsersAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[] getAspNetUsersByName(string name) {
            return base.Channel.getAspNetUsersByName(name);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers[]> getAspNetUsersByNameAsync(string name) {
            return base.Channel.getAspNetUsersByNameAsync(name);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClients() {
            return base.Channel.getClients();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsAsync() {
            return base.Channel.getClientsAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByName(string name) {
            return base.Channel.getClientsByName(name);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByNameAsync(string name) {
            return base.Channel.getClientsByNameAsync(name);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByPhoneNumber(string phoneNumber) {
            return base.Channel.getClientsByPhoneNumber(phoneNumber);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByPhoneNumberAsync(string phoneNumber) {
            return base.Channel.getClientsByPhoneNumberAsync(phoneNumber);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByEmail(string email) {
            return base.Channel.getClientsByEmail(email);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByEmailAsync(string email) {
            return base.Channel.getClientsByEmailAsync(email);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[] getClientsByAddressId(int AddressId) {
            return base.Channel.getClientsByAddressId(AddressId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO[]> getClientsByAddressIdAsync(int AddressId) {
            return base.Channel.getClientsByAddressIdAsync(AddressId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[] getAspNetRoles() {
            return base.Channel.getAspNetRoles();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[]> getAspNetRolesAsync() {
            return base.Channel.getAspNetRolesAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[] getAspNetRolesByName(string name) {
            return base.Channel.getAspNetRolesByName(name);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[]> getAspNetRolesByNameAsync(string name) {
            return base.Channel.getAspNetRolesByNameAsync(name);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[] getAspNetRolesById(int Id) {
            return base.Channel.getAspNetRolesById(Id);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles[]> getAspNetRolesByIdAsync(int Id) {
            return base.Channel.getAspNetRolesByIdAsync(Id);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[] getAspNetUserClaims() {
            return base.Channel.getAspNetUserClaims();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[]> getAspNetUserClaimsAsync() {
            return base.Channel.getAspNetUserClaimsAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[] getAspNetUserClaimsById(int Id) {
            return base.Channel.getAspNetUserClaimsById(Id);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[]> getAspNetUserClaimsByIdAsync(int Id) {
            return base.Channel.getAspNetUserClaimsByIdAsync(Id);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[] getAspNetUserClaimsByUserIdandClaimtypeandClaimValue(string userId, string claimType, string claimValue) {
            return base.Channel.getAspNetUserClaimsByUserIdandClaimtypeandClaimValue(userId, claimType, claimValue);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims[]> getAspNetUserClaimsByUserIdandClaimtypeandClaimValueAsync(string userId, string claimType, string claimValue) {
            return base.Channel.getAspNetUserClaimsByUserIdandClaimtypeandClaimValueAsync(userId, claimType, claimValue);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[] getAspNetUserLogins() {
            return base.Channel.getAspNetUserLogins();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[]> getAspNetUserLoginsAsync() {
            return base.Channel.getAspNetUserLoginsAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[] getAspNetUserLogin(string loginProvider, string providerKey, string userId) {
            return base.Channel.getAspNetUserLogin(loginProvider, providerKey, userId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins[]> getAspNetUserLoginAsync(string loginProvider, string providerKey, string userId) {
            return base.Channel.getAspNetUserLoginAsync(loginProvider, providerKey, userId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[] getAspNetUserRoles() {
            return base.Channel.getAspNetUserRoles();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[]> getAspNetUserRolesAsync() {
            return base.Channel.getAspNetUserRolesAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[] getAspNetUserRole(string userId, string roleId) {
            return base.Channel.getAspNetUserRole(userId, roleId);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles[]> getAspNetUserRoleAsync(string userId, string roleId) {
            return base.Channel.getAspNetUserRoleAsync(userId, roleId);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOs() {
            return base.Channel.getAddressDTOs();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsAsync() {
            return base.Channel.getAddressDTOsAsync();
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTO(string street, string city, string state, string zip) {
            return base.Channel.getAddressDTO(street, city, state, zip);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOAsync(string street, string city, string state, string zip) {
            return base.Channel.getAddressDTOAsync(street, city, state, zip);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreet(string street) {
            return base.Channel.getAddressDTOByStreet(street);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetAsync(string street) {
            return base.Channel.getAddressDTOByStreetAsync(street);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCity(string street, string city) {
            return base.Channel.getAddressDTOByStreetandCity(street, city);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityAsync(string street, string city) {
            return base.Channel.getAddressDTOByStreetandCityAsync(street, city);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOByStreetandCityandState(string street, string city, string state) {
            return base.Channel.getAddressDTOByStreetandCityandState(street, city, state);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOByStreetandCityandStateAsync(string street, string city, string state) {
            return base.Channel.getAddressDTOByStreetandCityandStateAsync(street, city, state);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByZip(string zip) {
            return base.Channel.getAddressDTOsByZip(zip);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByZipAsync(string zip) {
            return base.Channel.getAddressDTOsByZipAsync(zip);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByState(string state) {
            return base.Channel.getAddressDTOsByState(state);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByStateAsync(string state) {
            return base.Channel.getAddressDTOsByStateAsync(state);
        }
        
        public ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[] getAddressDTOsByCity(string city) {
            return base.Channel.getAddressDTOsByCity(city);
        }
        
        public System.Threading.Tasks.Task<ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO[]> getAddressDTOsByCityAsync(string city) {
            return base.Channel.getAddressDTOsByCityAsync(city);
        }
        
        public bool insertAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.insertAspNetUsers(user);
        }
        
        public System.Threading.Tasks.Task<bool> insertAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.insertAspNetUsersAsync(user);
        }
        
        public bool insertClients(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.insertClients(client);
        }
        
        public System.Threading.Tasks.Task<bool> insertClientsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.insertClientsAsync(client);
        }
        
        public bool insertAspNetRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles role) {
            return base.Channel.insertAspNetRoles(role);
        }
        
        public System.Threading.Tasks.Task<bool> insertAspNetRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetRoles role) {
            return base.Channel.insertAspNetRolesAsync(role);
        }
        
        public bool insertAspNetUserClaims(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim) {
            return base.Channel.insertAspNetUserClaims(claim);
        }
        
        public System.Threading.Tasks.Task<bool> insertAspNetUserClaimsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim) {
            return base.Channel.insertAspNetUserClaimsAsync(claim);
        }
        
        public bool insertAspNetUserLogins(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login) {
            return base.Channel.insertAspNetUserLogins(login);
        }
        
        public System.Threading.Tasks.Task<bool> insertAspNetUserLoginsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login) {
            return base.Channel.insertAspNetUserLoginsAsync(login);
        }
        
        public bool insertAspNetUserRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole) {
            return base.Channel.insertAspNetUserRoles(userRole);
        }
        
        public System.Threading.Tasks.Task<bool> insertAspNetUserRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole) {
            return base.Channel.insertAspNetUserRolesAsync(userRole);
        }
        
        public bool insertAddressDTOs(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.insertAddressDTOs(address);
        }
        
        public System.Threading.Tasks.Task<bool> insertAddressDTOsAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.insertAddressDTOsAsync(address);
        }
        
        public bool deleteAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.deleteAddress(address);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.deleteAddressAsync(address);
        }
        
        public bool deleteAspNetRole(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role) {
            return base.Channel.deleteAspNetRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAspNetRoleAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role) {
            return base.Channel.deleteAspNetRoleAsync(role);
        }
        
        public bool deleteAspNetUserClaim(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim) {
            return base.Channel.deleteAspNetUserClaim(claim);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAspNetUserClaimAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim) {
            return base.Channel.deleteAspNetUserClaimAsync(claim);
        }
        
        public bool deleteAspNetUserLogin(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login) {
            return base.Channel.deleteAspNetUserLogin(login);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAspNetUserLoginAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login) {
            return base.Channel.deleteAspNetUserLoginAsync(login);
        }
        
        public bool deleteAspNetUserRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole) {
            return base.Channel.deleteAspNetUserRoles(userRole);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAspNetUserRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole) {
            return base.Channel.deleteAspNetUserRolesAsync(userRole);
        }
        
        public bool deleteAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.deleteAspNetUsers(user);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.deleteAspNetUsersAsync(user);
        }
        
        public bool deleteClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.deleteClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> deleteClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.deleteClientAsync(client);
        }
        
        public bool updateAddress(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.updateAddress(address);
        }
        
        public System.Threading.Tasks.Task<bool> updateAddressAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AddressDTO address) {
            return base.Channel.updateAddressAsync(address);
        }
        
        public bool updateAspNetRole(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role) {
            return base.Channel.updateAspNetRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> updateAspNetRoleAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles role) {
            return base.Channel.updateAspNetRoleAsync(role);
        }
        
        public bool updateAspNetUserClaim(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim) {
            return base.Channel.updateAspNetUserClaim(claim);
        }
        
        public System.Threading.Tasks.Task<bool> updateAspNetUserClaimAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserClaims claim) {
            return base.Channel.updateAspNetUserClaimAsync(claim);
        }
        
        public bool updateAspNetUserLogin(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login) {
            return base.Channel.updateAspNetUserLogin(login);
        }
        
        public System.Threading.Tasks.Task<bool> updateAspNetUserLoginAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserLogins login) {
            return base.Channel.updateAspNetUserLoginAsync(login);
        }
        
        public bool updateAspNetUserRoles(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole) {
            return base.Channel.updateAspNetUserRoles(userRole);
        }
        
        public System.Threading.Tasks.Task<bool> updateAspNetUserRolesAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUserRoles userRole) {
            return base.Channel.updateAspNetUserRolesAsync(userRole);
        }
        
        public bool updateAspNetUsers(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.updateAspNetUsers(user);
        }
        
        public System.Threading.Tasks.Task<bool> updateAspNetUsersAsync(ClientManagement.UI.ServiceAccess.cmLogicService.AspNetUsers user) {
            return base.Channel.updateAspNetUsersAsync(user);
        }
        
        public bool updateClient(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.updateClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> updateClientAsync(ClientManagement.UI.ServiceAccess.cmLogicService.ClientDTO client) {
            return base.Channel.updateClientAsync(client);
        }
    }
}
